import streamlit as st
import pandas as pd
import os

st.header("üë• Employee data (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô)")
st.write("This application is designed to help you manage employee information viewing the list of employees, adding new entries, or deleting existing ones.")
st.caption("‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ")
st.write("___")
# Load existing employee data
if os.path.exists("employee_info.csv"):
    employee_df = pd.read_csv("employee_info.csv")
else:
    employee_df = pd.DataFrame(columns=["employee_id", "name", "Department"]) 

## View employees by department
st.subheader("üîç List of employees by department")
st.caption("> ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å")

if not employee_df.empty:
    # Select department
    departments = ["All"] + sorted(employee_df["department"].dropna().unique().tolist())
    selected_dept = st.selectbox("Select department / ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å", departments)

    # Filter based on selection
    if selected_dept == "All":
        filtered_df = employee_df
    else:
        filtered_df = employee_df[employee_df["department"] == selected_dept]

    # Employee table
    if not filtered_df.empty:
        st.dataframe(filtered_df.reset_index(drop=True).rename(lambda x: x + 1))
    else:
        st.warning("‚ö†Ô∏è There are no employees in this department. / ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏ô‡∏µ‡πâ")
else:
    st.warning("‚ö†Ô∏è No employee information yet / ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô") 

st.write("___")
## Add new employee
st.subheader("‚ûï Add new employee")
st.caption("> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà")

with st.form("add_employee_form"):
    new_id = st.text_input("Employee ID (‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô)")
    new_name = st.text_input("Name (‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô)")
    new_dept = st.text_input("Department (‡πÅ‡∏ú‡∏ô‡∏Å)")

    submitted = st.form_submit_button("‚úÖ Add / ‡πÄ‡∏û‡∏¥‡πà‡∏°")

if submitted:
    if new_id and new_name and new_dept:
        # Check for duplicate employee_id
        if new_id in employee_df["employee_id"].values:
            st.warning("‚ö†Ô∏è This employee ID is taken! / ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!")
        else:
            new_row = pd.DataFrame([{
                "employee_id": new_id,
                "name": new_name,
                "department": new_dept
            }])
            updated_df = pd.concat([employee_df, new_row], ignore_index=True)
            updated_df.to_csv("employee_info.csv", index=False)
            st.success("‚úÖ Employee has been added! / ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
            st.rerun()
    else:
        st.error("‚ùå Please fill in all information completely / ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")

st.write("___")
## Delete employee
st.subheader("‚ûñ Delete employee")
st.caption("> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö")

if not employee_df.empty:
    # Filter by department first
    del_dept = st.selectbox("Select department / ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å", ["All"] + sorted(employee_df["department"].dropna().unique().tolist()), key="delete_dept")
    
    if del_dept == "All":
        df_to_delete_from = employee_df
    else:
        df_to_delete_from = employee_df[employee_df["department"] == del_dept]

    if not df_to_delete_from.empty:
        employee_options = df_to_delete_from["name"] + " (" + df_to_delete_from["employee_id"] + ")"
        selected_emp = st.selectbox("Select employee / ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", employee_options)

        confirm_delete = st.checkbox("‚ö†Ô∏è Please confirm that you want to delete this employee. / ‡πÇ‡∏õ‡∏£‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ", key="confirm_delete")

        if st.button("‚ùå Delete / ‡∏•‡∏ö"):
            if confirm_delete:
                emp_id = selected_emp.split("(")[-1].replace(")", "").strip()
                updated_df = employee_df[employee_df["employee_id"] != emp_id]
                updated_df.to_csv("employee_info.csv", index=False)
                st.success("‚úÖ Employee has been deleted. / ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                st.rerun()
            else:
                st.warning("Check to confirm before deleting data. / ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    else:
        st.warning("‚ö†Ô∏è There are no employees in this department. / ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏ô‡∏µ‡πâ")
else:
    st.warning("‚ö†Ô∏è No employee information yet / ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô")
